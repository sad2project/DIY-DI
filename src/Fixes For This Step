Step 7 Principle: Scopes
+ Most projects have a concept of scopes
  + Application Scope
  + Request Scope
+ An explicit scope object lends uniformly to the plumbing in the injection 
helpers
+ Scopes can also hold "singletons" or other objects with the same lifetime as 
the scope 
  
Code changes: Use an ApplicationScope
+ The injection helpers all pass around a parameter for "String[] args"
+ If this variable type changed, or if a second variable were needed, every
injection helper signature would be affected
+ Instead, the injection helpers should pass around an "ApplicationScope"
+ Changes can be encapsulated in the scope

Create ApplicationScope
+ The ApplicationScope class is simple
+ It holds the String[] args that were being passed around
+ It can hold the MarketClient singleton, so that the singleton implementation
doesn't need statics
+ It could hold any other objects that need to be cached for the lifetime of the
application

Anti-Patterns
+ Service locators and context objects tend to grow and grow, making tests 
brittle
+ Scope objects are neither of thes
+ Scope objects  stay simple and decoupled, even when the application gets
complicated
+ Scope objects and production objects don't even have a knowledge of each other;
the injection helper is a go-between.

Testable Example
+ After making these changes, everything is easy to test
+ Teams tend to write more tests and better tests when they're easy
+ Once introduced, these patterns are easy to follow